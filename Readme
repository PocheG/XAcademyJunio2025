# Challenge XAcademy

En este readme se deja registro de las decisiones tomadas en cada commit. 
Las decisiones en cuanto al estilo visual las dejo en el siguiente figma: https://www.figma.com/design/Dc8YFuKtNAwYe5F0jUleoM/XAcademy-Challenge?node-id=3-19&t=9XewDKwFRoKwDeov-0


## Como iniciar el proyecto
1- Iniciar la instancia de docker donde esta almacenada la base de datos (debe correr en el puerto 3306).
2- Abrir una consola en la carpeta backend y ejecutar el comando npm run start.
3- Abrir una consola en la carpeta frontend y ejecutar el comando npm run start.


## Primer commit 

### Backend
- Decidi estructurar el backend de forma modular porque me parecia una forma organizada y escalable. Además, es la que utilizo en otro proyecto.
- Dentro de cada módulo decidi separar la funcionalidad en controller-service-repository para que cada método sea mas cohesivo y fácil de mantener. El controller se encarga de las peticiones, el repository de la comunicación con la base de datos y el service de la lógica de negocio. Todo lo que corresponda al módulo  pero no sea ninguno de los componentes mencionados (como los modelos de sequelize y las clases para validaciones) estara en una carpeta core.
- Pensaba dejar el proyecto en javascript, pero al querer hacer una validacion reutilizable para los jugadores paginados no se podia, asi que decidi pasarlo a typescript.
- Decidi crear un middleware para el manejo de errores y crear errores nuevos para manejar las respuestas de las response.
- La funcionalidad del csv la deje como una utility porque es algo que podria tranquilamente utilizarse en otro modulo.

- Dependencias agregadas:
    -- class-validator: Decidi usarla para las validaciones ya que me parecio mas ordenado hacer las validaciones en las clases antes que en el router. Además las dos primeras rutas que debia crear para el challenge (para obtener jugadores paginados y para exportarlos como csv), usan los mismos filtros, asi que iba a tener las validaciones duplicadas.
    -- class-transformer: Necesario para las validaciones. Permite transformar el tipo de una variable al momento de hacer una validación. Dado que pienso validar las query (cuyo valores son string), esta dependencia me ahorra la necesidad de transformar los valores previamente.
    -- es-lint: Para ayudar a mantenere el código consistente y limpio (como detectar variables no usadas por ejemplo).
    -- sequelize: como ORM
    -- sql2: para conectar con la base de datos mysql
    -- swagger/swagger-jsdoc/swagger-ui: Para la documentación de los endpoints.
    -- reflect-metadata: para que se puedan detectar las etiquetas de class-validator

### Frontend
- El sistema de carpetas del front esta dividida en:
-- Components: dedicado a componentes reutilizabels (como la tabla).
-- layout: para almacenar componentes que son parte del layout de la aplicacion, como la sidebar.
-- models: para guardar las clases utilizadas en la aplicación.
-- modules: para guardar los componentes de páginas de la aplicación.
-- service: Para almacenar servicios que pueden ser usados en mas de un modulo.

- Para la navegación, decidi hacer la sidebar y la navbar por separado y usar un componente para renderizarlos condicionalmente. Si bien hacer lo mismo, me parecio mas organizado, principalmente por las clases del scss.
- Defini los breakpoints en un archivo global para definirlos una sola vez y poder importarlos desde cada archivo scss que los requiera. Estos breakpoints los saque de un proyecto que habia hecho anteriormente. 
- La tabla claramente me parecio un componente que podria aparecer en varios módulos por mas que no haya planteado mas pantallas que la tengan, asi que la puse dentro de components.

## Segundo commit
- Me parecio correcto agregar los endpoints para obtener los endpoints para los filtros dentro del módulo players porque comparten el mismo módelo de sequelize (lo correcto seria tener una tabla aparte en la base de datos para cada filtros seleccionable y que cada uno tenga su endpoint aparte, pero no dispongo de tiempo para hacer las modificaciones en la db).

## Tercer commit 
- Por mas que ya setee controles, dicidi quitarlos de momento porque no tiene mucho sentido hacer una validación a una busqueda como esta. En el peor de los casos, se trae una lista vacia en lugar de romper alguna regla de negocio o generar un error.

## Cuarto commit 
- Agrege los condicionales los inputs de error e isLoading a la tabla. Error me parecio correcto para que cuando haay un error al usar la tabla no se tenga que hacer un mensaje de error en cada lugar que se use. isLoading lo utilizo para poder mostrar un skeleton en la tabla porque el uso de skeletons para datos que se estan esperando me parece estetico y correcto, le da al usuario la sensación de que algo se esta procesando.

## Quinto commit
- El control en el controller de getPlayerById lo hice sin class validator porque me parecio mas adecuado: si bien no es mucho trabajo, hacer una clase por una validación de un campo parece excesivo.

## Sexto commit
- Decidi manejar el feedback de si se encuentra o no un jugador de la misma forma que en la pagina donde se ve la tabla. 
- El loading de las estadisticas los deje como circulos, admito que me gustaria darle una forma mas cercana al gráfico si me da el tiempo.

## Septimo commit
- Si bien la consiga dice que el actualizar son menos campos, me parecia correcto el ofrecer la posibilidad de editar los campos que el detalle del jugador te muestra. 

## Octavo commit
- Agregue endpoints para otros datos ya definidos en la base de datos, me parece correcto que si ya existen cosas como los rasgos de los jugadores, deberian mostrarse como opciones en lugar de que el usuario ingrese un texto plano.

### Noveno commit
- Inicialmente devolvia los stats del jugador desde el back ya armado porque me parecio mas directo que venga la información ya acomodada para pasarselo a la función que arma el gráfico. Ahora me estoy dando cuenta que hacer eso hace que tomar los valores para setear cada estadística individual en el formulario de actualizar jugador sea completamente impractico, asi que en este commit pienso hacer ese cambio.